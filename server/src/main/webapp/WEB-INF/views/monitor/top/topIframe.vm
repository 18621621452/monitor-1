<!DOCTYPE html>
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<link href="/static/top/css/jquery.snippet.min.css" rel="stylesheet">

<script src="/static/js/jquery.min.js?v=2.1.4"></script>
<script src="/static/js/bootstrap.min.js?v=3.3.6"></script>
<script src="/static/js/bootstrap-select.js"></script>

<script type="text/javascript" src="/static/top/js/snippet/jquery.snippet.min.js"></script>

<script type="text/javascript" src="/static/top/js/jtopo-min.js"></script>
<script type="text/javascript" src="/static/top/js/toolbar.js"></script>
<div id="myDiagramDiv" style="border: solid 0px black; width:100%; height:700px">
    <canvas width="5850" height="1550" id="canvas" ></canvas>
</div>

<script>

function post(paramter, url) {
    var result = "";
    $.ajax({
        type: "POST",
        url: url,
        data: paramter,
        async: false,
        success: function (data) {
            result = data;
        }
    });
    return result;
}

/*16进制颜色转为RGB格式*/  
String.prototype.colorRgb = function(){  
    //十六进制颜色值的正则表达式  
    var reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;  
    var sColor = this.toLowerCase();  
    if(sColor && reg.test(sColor)){  
        if(sColor.length === 4){  
            var sColorNew = "#";  
            for(var i=1; i<4; i+=1){  
                sColorNew += sColor.slice(i,i+1).concat(sColor.slice(i,i+1));     
            }  
            sColor = sColorNew;  
        }  
        //处理六位的颜色值  
        var sColorChange = [];  
        for(var i=1; i<7; i+=2){  
            sColorChange.push(parseInt("0x"+sColor.slice(i,i+2)));    
        }  
        return sColorChange.join(",")
    }else{  
        return sColor;    
    }  
};  

function get_count(datas, data) {
    if (!data) {
        return datas
    }
    for (i = 0; i < data.length; i++) {
        datas += data[i][1]
    }
    return datas
}


// 获取今日总流量
function get_top_link_value(ip, index_name, type) {
   if(!index_name){return}
   indexs = index_name.split("|")
   count_url = "/monitor/graph/historyData?ip=" + ip + "&name="+indexs[1]+"&dayNumber=&type="+indexs[0]+"&startT=&endT="
   if(type == "last"){
     count_url = count_url + "&last=1"
   }
   data = post({}, count_url)
   if(type=="last" && data){
      return indexs[1] +" " + data[0][1]
   }
   return index_name +" " + data 
}


function make_top(){
        var canvas = document.getElementById('canvas');
        var stage = new JTopo.Stage(canvas);
        //显示工具栏
        //showJTopoToobar(stage);

        var scene = new JTopo.Scene();
        //scene.background = './img/bg.jpg';

        function node(x, y, img) {
        var node = new JTopo.Node();
        node.setImage('/static/top/img/statistics/' + img, true);
        node.setLocation(x, y);
        scene.add(node);
        return node;
        }

        function reset_top(key, x, y){
            list = {};
            _data = {}
            var data = $("#mySavedModel", parent.document).val().replace(/\n/g,"")
            var vdata = JSON.parse(data);
            var nodeData = vdata["nodeDataArray"]
            var linkData = vdata["linkDataArray"]

            for(dataI=0;dataI<nodeData.length;dataI++){
               if(key == nodeData[dataI]["key"]){
        	var d ;
        	d = nodeData[dataI];
        	_data = d
        	_data["x"] =  parseInt(x)
        	_data["y"] = parseInt(y)
        	nodeData[dataI] = _data
               }
            }
            list["nodeDataArray"] = nodeData
            if($("#top_to").val()){
        	from = {}
        	from["src"] = key
        	from["to"] = $("#top_to").val()
        	from["status"] = "ok"
        	linkData.push(from)
            }
            list["linkDataArray"] = linkData
            $("#mySavedModel", parent.document).val(JSON.stringify(list))
    }

        
    // 简单连线
    function newLink(nodeA, nodeZ, text,linkColor,dashedPattern , lineWidth, topLinkTextColor){
        var link = new JTopo.Link(nodeA, nodeZ, text);        
        link.lineWidth = lineWidth; // 线宽
        if(dashedPattern){
           link.dashedPattern = dashedPattern; // 虚线
        }
        link.bundleOffset = 60; // 折线拐角处的长度
        link.bundleGap = 20; // 线条之间的间隔
        link.textOffsetY = 3; // 文本偏移量（向下3个像素）
        link.strokeColor = linkColor;
        link.fontColor = topLinkTextColor;
        scene.add(link);
        return link;
    }
    
    // 折线
    function newFoldLink(nodeA, nodeZ, text, linkColor,  direction, dashedPattern, lineWidth, topLinkTextColor){
        var link = new JTopo.FoldLink(nodeA, nodeZ, text);
        link.strokeColor = linkColor;
        link.direction = direction || 'horizontal';
        link.arrowsRadius = 25; //箭头大小
        link.lineWidth = lineWidth; // 线宽
        link.bundleOffset = 60; // 折线拐角处的长度
        link.bundleGap = 20; // 线条之间的间隔
        link.textOffsetY = 3; // 文本偏移量（向下3个像素）
        link.fontColor = topLinkTextColor;
        if(dashedPattern){
           link.dashedPattern = dashedPattern; // 虚线
        }
        scene.add(link);
        return link;
    }
    
    // 二次折线
    function newFlexionalLink(nodeA, nodeZ, text, linkColor, direction, dashedPattern, lineWidth, topLinkTextColor){
        var link = new JTopo.FlexionalLink(nodeA, nodeZ, text);
        link.strokeColor = linkColor;
        link.direction = direction || 'horizontal';
        link.arrowsRadius = 10;
        link.lineWidth = lineWidth; // 线宽
        link.offsetGap = 35;
        link.bundleGap = 15; // 线条之间的间隔
        link.textOffsetY = 10; // 文本偏移量（向下15个像素）
        link.strokeColor = linkColor;
        link.fontColor = topLinkTextColor;
        if(dashedPattern){
           link.dashedPattern = dashedPattern; // 虚线
        }
        scene.add(link);
        return link;
    }
    
    // 曲线
    function newCurveLink(nodeA, nodeZ, text, linkColor, dashedPattern, lineWidth, topLinkTextColor){
        var link = new JTopo.CurveLink(nodeA, nodeZ, text);
        link.lineWidth = lineWidth; // 线宽
        link.arrowsRadius = 10;
        link.offsetGap = 35;
        link.textOffsetY = 10; // 文本偏移量（向下15个像素）
        link.bundleGap = 15; // 线条之间的间隔
        link.strokeColor = linkColor;
        link.fontColor = topLinkTextColor;
        if(dashedPattern){
           link.dashedPattern = dashedPattern; // 虚线
        }
        scene.add(link);
        return link;
    }

    function textNodeF(ip, x, y) {
            var textNode = new JTopo.TextNode(ip);
            textNode.font = 'bold 16px 微软雅黑';
            textNode.fontColor = '0,0,0';
            textNode.setLocation(x, y);
            return textNode
    }

    function linkNode(nodeA, nodeZ, f, width) {
        var link;
        if (f) {
          link = new JTopo.FoldLink(nodeA, nodeZ);
        } else {
           link = new JTopo.Link(nodeA, nodeZ);
        }
        link.lineWidth = width; // 线宽
        link.bundleOffset = 60; // 折线拐角处的长度
        link.bundleGap = 10; // 线条之间的间隔
        link.textOffsetY = -43; // 文本偏移量（向下3个像素）
        link.strokeColor = '0,200,255';
        link.fontColor = '0,0,0';
        //link.text = "traffic";
        //if(traffic){
        //   link.text = traffic;
        // }
        link.direction = 'vertical';
        scene.add(link);
        return link;
    }

        var data = $("#mySavedModel", parent.document).val().replace(/\n/g,"")
        var vdata = JSON.parse(data);
        var dataNodeData = vdata["nodeDataArray"]
        var linkNodeData = vdata["linkDataArray"]
        for(dataI=0;dataI<dataNodeData.length;dataI++){
          var d ;
          d = dataNodeData[dataI];

          if(d["graphType"] == "text"){
              window["nodeData"+d["key"]] = textNodeF(d["top_text"], d["y"], d["x"]);
              scene.add(window["nodeData"+d["key"]]);

          }else{
              window["nodeData"+d["key"]] = node(d["x"], d["y"], d["img"]);
              window["nodeData"+d["key"]].alarm = '100';
              window["nodeData"+d["key"]].alarmColor = '0,0,0';
          }
          window["nodeData"+d["key"]].key = d["key"]
          window["nodeData"+d["key"]].editData = d
          // 双击编辑事件
          window["nodeData"+d["key"]].dbclick(function () {
        	 if(this.editData["graphType"] == "text"){
        	    $("#inlineCheckbox2",   parent.document).prop("checked", "true")
                     window.parent.change_type(2)
        	 }else{
        	    $("#inlineCheckbox1",   parent.document).prop("checked", "true")
                     window.parent.change_type(1)
        	 }
        	 $("#top_text", parent.document).val(this.editData["top_text"])
        	 $("#topLinkColor", parent.document).val(this.editData["topLinkColor"])
        	 $("#topLinkValue", parent.document).val(this.editData["topLinkValue"])
        	 $("#topLinkTextColor", parent.document).val(this.editData["topLinkTextColor"])
        	 $("#topLinkType", parent.document).val(this.editData["topLinkType"])
        	 $("#top_ip",   parent.document).val(this.editData["text"])
        	 $("#topLinkSize",   parent.document).val(this.editData["topLinkSize"])
        	 $("#top_description", parent.document).val(this.editData["description"])
        	 $("#top_left", parent.document).val(this.getBound()["left"])
        	 $("#top_top",  parent.document).val(this.getBound()["top"])
                 if(this.editData["to"]="image" || this.editData["to"] == "text"){
        	    $("#top_to",  parent.document).val("")
                 }else{
        	    $("#top_to",  parent.document).val(this.editData["to"])
                 }
        	 $("#top_src", parent.document).val(this.key)
        	 $("#top_select_images", parent.document).attr("value", this.editData["img"])
                 top_img = $('#top_select_images', parent.document).html().split("\n");
                 old_html = ""
                 new_html = "<select class='selectpicker bla bla bli form-control' data-live-search='true' onchange=\"$('#select_images').attr('src', '/static/top/img/statistics/'+$(this).val())\" id='top_select_images'>"
                 new_html += "<option value='"+this.editData["img"]+"'>"+this.editData["img"]+"</option>\n"
                 $('#top_select_images_div', parent.document).empty();
                 for(topi=0;topi<top_img.length;topi++){
                   topis = top_img[topi]
                   to = topis.replace(/<option value="/g,"");
                   to = to.replace(/<\/option>/g," ");
                   to = to.replace(/"/g,"")
                   to = to.replace(/>/g," ")
                   to = to.trim()
                   to = to.split(" ")
                   if(to[0]!=this.editData["img"] && to[0].length > 0){
                     new_html += "<option value='"+to[0]+"'>"+to[0]+"</option>\n"
                   }
                 }
                 new_html += "</select>"
                 $('#top_select_images_div', parent.document).append(new_html);
                 $('#top_select_images', parent.document).selectpicker('refresh');
                 $('#select_images', parent.document).attr('src', '/static/top/img/statistics/'+this.editData["img"])
        	 $("#mySavedModelDelete", parent.document).val(JSON.stringify(this.editData))
          })

          // 点击事件
          window["nodeData"+d["key"]].click(function () {
        	$("#top_to", parent.document).val(this.key)
          })

          // 拖动事件监听
          window["nodeData"+d["key"]].mousedrag(function () {
               reset_top(this.key, this.getBound()["left"], this.getBound()["top"]);
          })

        }

        for(dataI=0;dataI<linkNodeData.length;dataI++){
           var d ;
           d = linkNodeData[dataI];
           var to = window["nodeData"+d["to"]];
           var src = window["nodeData"+d["src"]]
           var topLinkSize = parseInt(d["topLinkSize"])
           var topLinkTextColor = d["topLinkTextColor"].colorRgb()
           var color = d["topLinkColor"].colorRgb()
           var topLinkValue = get_top_link_value(d["ip"], d["topLinkValue"], "last");
           switch(d["topLinkType"]){
              case "link":
                newLink(src, to, topLinkValue, color, false, topLinkSize, topLinkTextColor);
                break;
              case "link2":
                newLink(src, to, topLinkValue, color, 2, topLinkSize, topLinkTextColor);
                break;
              case "foldLink":
                newFoldLink(src, to, topLinkValue, color, false, topLinkSize, topLinkTextColor);
                break;
              case "foldLink2":
                newFoldLink(src, to, topLinkValue, color,"horizontal", 2, topLinkSize, topLinkTextColor);
                break;
              case "flexionalLink":
                newFlexionalLink(src, to, topLinkValue, color,"", false, topLinkSize, topLinkTextColor);
                break;
              case "flexionalLink2":
                newFlexionalLink(src, to, topLinkValue,color, "vertical",2, topLinkSize, topLinkTextColor);
                break;
              case "curveLink":
                newCurveLink(src, to, topLinkValue, color, false, topLinkSize, topLinkTextColor);
                break;
              default :
                linkNode(src, to, "default", color);
                break;
           }
        }

        stage.add(scene);
};
make_top();
</script>
